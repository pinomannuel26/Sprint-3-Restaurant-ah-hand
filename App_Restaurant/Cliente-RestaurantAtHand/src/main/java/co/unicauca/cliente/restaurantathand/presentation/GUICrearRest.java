/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.unicauca.cliente.restaurantathand.presentation;

import co.unicauca.cliente.restaurantathand.access.Factory;
import co.unicauca.cliente.restaurantathand.access.IRestaurantAccess;
import co.unicauca.cliente.restaurantathand.domain.entity.Admin;
import co.unicauca.cliente.restaurantathand.domain.entity.Restaurant;
import co.unicauca.cliente.restaurantathand.domain.entity.User;
import co.unicauca.cliente.restaurantathand.domain.service.RestaurantService;
import co.unicauca.cliente.restaurantathand.infra.Messages;
import static co.unicauca.cliente.restaurantathand.infra.Messages.successMessage;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Michelle Vallejo
 */
public class GUICrearRest extends javax.swing.JInternalFrame {

    /**
     * Creates new form GUICrearRest
     */
    ImageIcon iconobtn = new ImageIcon("src/main/java/resource/mas.png");
    ImageIcon iconolbl = new ImageIcon("src/main/java/resource/check.png");
    
    /*
     * administrador del restaurante
    */
    
    private Admin admin;
    
    /**
     * Almacena una lista de restaurantes
     */
    private List<Restaurant> restaurants;
    
    
    public GUICrearRest() {
        initComponents();
        lblLogo.setIcon(iconolbl);
        btnRegistrarRest.setIcon(iconobtn);
        cargarLista();
        cargarDatosTabla();
        
        btnActualizar.setEnabled(false);
    }

    public GUICrearRest(Admin admin) {
        initComponents();
        lblLogo.setIcon(iconolbl);
        btnRegistrarRest.setIcon(iconobtn);
        this.admin = admin;
        cargarLista();
        cargarDatosTabla();
        btnActualizar.setEnabled(false);
        admin.setRestaurants(restaurants);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCentro = new javax.swing.JPanel();
        lblNitRest = new javax.swing.JLabel();
        txtNitRest = new javax.swing.JTextField();
        lblRequeNit = new javax.swing.JLabel();
        lblNameRest = new javax.swing.JLabel();
        txtNameRest = new javax.swing.JTextField();
        lblRequeName = new javax.swing.JLabel();
        lblAddressRest = new javax.swing.JLabel();
        txtAddressRest = new javax.swing.JTextField();
        lblRequeAddress = new javax.swing.JLabel();
        lblCityRest = new javax.swing.JLabel();
        txtCityRest = new javax.swing.JTextField();
        lblRequeCity = new javax.swing.JLabel();
        lblPhoneRest = new javax.swing.JLabel();
        txtPhoneRest = new javax.swing.JTextField();
        lblRequePhone = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtEmailRest = new javax.swing.JTextField();
        lblRequeEmail = new javax.swing.JLabel();
        lblEspacioBoton = new javax.swing.JLabel();
        btnRegistrarRest = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        pnlSur = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListarRestaurant = new javax.swing.JTable();
        pnlNorte = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        pnlCentro.setBackground(new java.awt.Color(255, 255, 255));
        pnlCentro.setPreferredSize(new java.awt.Dimension(393, 157));
        pnlCentro.setLayout(new java.awt.GridLayout(7, 3));

        lblNitRest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNitRest.setText("Nit: ");
        pnlCentro.add(lblNitRest);
        pnlCentro.add(txtNitRest);

        lblRequeNit.setText("Requerido");
        pnlCentro.add(lblRequeNit);

        lblNameRest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNameRest.setText("Name:");
        pnlCentro.add(lblNameRest);
        pnlCentro.add(txtNameRest);

        lblRequeName.setText("Requerido");
        pnlCentro.add(lblRequeName);

        lblAddressRest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddressRest.setText("Address:");
        pnlCentro.add(lblAddressRest);
        pnlCentro.add(txtAddressRest);

        lblRequeAddress.setText("Requerido");
        pnlCentro.add(lblRequeAddress);

        lblCityRest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCityRest.setText("City:");
        pnlCentro.add(lblCityRest);
        pnlCentro.add(txtCityRest);

        lblRequeCity.setText("Requerido");
        pnlCentro.add(lblRequeCity);

        lblPhoneRest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhoneRest.setText("Phone:");
        pnlCentro.add(lblPhoneRest);
        pnlCentro.add(txtPhoneRest);

        lblRequePhone.setText("Requerido");
        pnlCentro.add(lblRequePhone);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Email:");
        pnlCentro.add(jLabel1);
        pnlCentro.add(txtEmailRest);

        lblRequeEmail.setText("Requerido");
        pnlCentro.add(lblRequeEmail);
        pnlCentro.add(lblEspacioBoton);

        btnRegistrarRest.setText("Registrar");
        btnRegistrarRest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarRestActionPerformed(evt);
            }
        });
        pnlCentro.add(btnRegistrarRest);

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        pnlCentro.add(btnActualizar);

        pnlSur.setBackground(new java.awt.Color(255, 255, 255));
        pnlSur.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Listar Restaurantes ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        pnlSur.setLayout(new java.awt.GridLayout(1, 0));

        tblListarRestaurant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nit", "Name", "Address", "City", "Phone", "Email", "Editar", "Eliminar"
            }
        ));
        tblListarRestaurant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListarRestaurantMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListarRestaurant);

        pnlSur.add(jScrollPane1);

        pnlNorte.setBackground(new java.awt.Color(153, 153, 255));
        pnlNorte.setLayout(new java.awt.GridLayout(1, 0));

        lblLogo.setBackground(new java.awt.Color(255, 255, 255));
        lblLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogo.setMaximumSize(new java.awt.Dimension(393, 56));
        lblLogo.setMinimumSize(new java.awt.Dimension(393, 56));
        lblLogo.setPreferredSize(new java.awt.Dimension(393, 28));
        pnlNorte.add(lblLogo);
        lblLogo.getAccessibleContext().setAccessibleName("holi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlNorte, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
            .addComponent(pnlSur, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlNorte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnlCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(pnlSur, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblListarRestaurantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListarRestaurantMouseClicked
        // TODO add your handling code here:
        int column = tblListarRestaurant.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY() / tblListarRestaurant.getRowHeight();
        if (row < tblListarRestaurant.getRowCount() && row >= 0 && column < tblListarRestaurant.getColumnCount() && column >= 0) 
        {
            Object value = tblListarRestaurant.getValueAt(row, column);
            if (value instanceof JButton) 
            {
                ((JButton) value).doClick();
                JButton btn = (JButton) value;
                if (btn.getName().equals("btnEliminar")) {
                    if (JOptionPane.showConfirmDialog(rootPane, "Se eliminará el registro, ¿desea continuar?",
                            "Eliminar Registro", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) 
                    {
                        IRestaurantAccess service = Factory.getInstance().getRestaurantService();
                        // Inyecta la dependencia
                        RestaurantService restaurant = new RestaurantService(service);
                        
                        try {
                            restaurant.delete(restaurants.get(row).getAtrNitRest());
                        } catch (Exception ex) {
                            Logger.getLogger(GUICrearRest.class.getName()).log(Level.SEVERE, null, ex);
                        }
                       
                        
                        cargarLista();
                        cargarDatosTabla();
                    }
                } else 
                {
                    if (JOptionPane.showConfirmDialog(rootPane, "Desea actualizar el registro, ¿desea continuar?",
                            "Actualizar Registro", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    
                        try {
                            actualizarRestaurante(row);
                        } catch (Exception ex) {
                            Logger.getLogger(GUICrearRest.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    
                    }
                        
                }
            }
        }
    }//GEN-LAST:event_tblListarRestaurantMouseClicked

    private void btnRegistrarRestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarRestActionPerformed
        IRestaurantAccess service = Factory.getInstance().getRestaurantService();
       // Inyecta la dependencia
       
       String nit = txtNitRest.getText();
       String name = txtNameRest.getText();
       String address = txtAddressRest.getText();
       String city = txtCityRest.getText();
       String phone = txtPhoneRest.getText();
       String email = txtEmailRest.getText();
       
       if (nit.equals("") || name.equals("") || address.equals("")
           || city.equals("") || phone.equals("") || email.equals("")) {
            
            Messages.warningMessage("ERROR AL CREAR EL RESTAURANTE: \nCampos vacios", "Warning");
            return;
        }
       
        RestaurantService restaurantService = new RestaurantService(service);
        Restaurant restaurant = new Restaurant();
        restaurant.setAtrAddressRest(address);
        restaurant.setAtrAdmiRest(admin.getAtrUserName());
        restaurant.setAtrCityRest(city);
        restaurant.setAtrEmailRest(email);
        restaurant.setAtrMobileRest(phone);
        restaurant.setAtrNameRest(name);
        restaurant.setAtrNitRest(nit);
        
        try {
            if (restaurantService.createRestaurant(restaurant)) {
                successMessage("Restaurante agregada con éxito.", "Atención");
                cargarLista();
                cargarDatosTabla();
            }else{
                Messages.warningMessage("En el sistema se encuentra registrado ya un Restaurante con ese NIt", "Warning");
            }
        } catch (Exception ex) {
            successMessage(ex.getMessage(), "Atención");
        }
        
        btnActualizar.setEnabled(false);
        btnRegistrarRest.setEnabled(true);
       
    }//GEN-LAST:event_btnRegistrarRestActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        IRestaurantAccess service = Factory.getInstance().getRestaurantService();
       // Inyecta la dependencia
       
       String nit = txtNitRest.getText();
       String name = txtNameRest.getText();
       String address = txtAddressRest.getText();
       String city = txtCityRest.getText();
       String phone = txtPhoneRest.getText();
       String email = txtEmailRest.getText();
       
       if (nit.equals("") || name.equals("") || address.equals("")
           || city.equals("") || phone.equals("") || email.equals("")) {
            
            Messages.warningMessage("ERROR AL ACTUALIZAR EL RESTAURANTE: \nCampos vacios", "Warning");
            return;
        }
       
        RestaurantService restaurantService = new RestaurantService(service);
        try {
            
            if (restaurantService.updateRestaurant(nit,name,address,phone,email,city,admin.getAtrUserName())) {
                successMessage("Restaurante actualizado con éxito.", "Atención");
                cargarLista();
                cargarDatosTabla();
            }else{
                Messages.warningMessage("el Restaurante no pudo ser actualizado", "Warning");
            }
        } catch (Exception ex) {
            successMessage(ex.getMessage(), "Atención");
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    
     public void actualizarRestaurante(int pos) throws Exception {
         
        Restaurant restaurant = new Restaurant();
        IRestaurantAccess service = Factory.getInstance().getRestaurantService();
        // Inyecta la dependencia
        RestaurantService restaurantService = new RestaurantService(service);
        restaurant = restaurantService.findRestaurantByNit(restaurants.get(pos).getAtrNitRest());
        
        btnRegistrarRest.setEnabled(false);
        btnActualizar.setEnabled(true);
        txtNitRest.setText(restaurant.getAtrNitRest());
        txtNameRest.setText(restaurant.getAtrNameRest());
        txtAddressRest.setText(restaurant.getAtrAddressRest());
        txtCityRest.setText(restaurant.getAtrCityRest());
        txtPhoneRest.setText(restaurant.getAtrMobileRest());
        txtEmailRest.setText(restaurant.getAtrEmailRest());
        
        txtNitRest.setEditable(false);
        
       
    }
    
    
    /**
     * Carga un lista a traves de una API REST
     */
    private void cargarLista() {
        IRestaurantAccess service = Factory.getInstance().getRestaurantService();
        // Inyecta la dependencia
        RestaurantService restaurant = new RestaurantService(service);

        try {
            restaurants = restaurant.findRestaurantByUserAdmin(admin.getAtrUserName());
        } catch (Exception ex) {
            successMessage(ex.getMessage(), "Atención");
        }
    }
    
    public void cargarDatosTabla() {
        tblListarRestaurant.setDefaultRenderer(Object.class, new Render());
        JButton btnEditar = new JButton("Editar");
        btnEditar.setName("btnEditar");
        JButton btnEliminar = new JButton("Eliminar");
        btnEliminar.setName("btnEliminar");
        DefaultTableModel model = (DefaultTableModel) tblListarRestaurant.getModel();
        limpiarTabla(model);
        Object rowData[] = new Object[8];
        for (Restaurant restaurent : restaurants) {
            rowData[0] = restaurent.getAtrNitRest();
            rowData[1] = restaurent.getAtrNameRest();
            rowData[2] = restaurent.getAtrAddressRest();
            rowData[3] = restaurent.getAtrCityRest();
            rowData[4] = restaurent.getAtrMobileRest();
            rowData[5] = restaurent.getAtrEmailRest();
            rowData[6] = btnEditar;
            rowData[7] = btnEliminar;
            model.addRow(rowData);
        }
    }
    
    public void limpiarDatos() {
        txtNitRest.setText("");
        txtNameRest.setText("");
        txtAddressRest.setText("");
        txtCityRest.setText("");
        txtPhoneRest.setText("");
        txtEmailRest.setText("");
        
    }
    public void limpiarTabla(DefaultTableModel objTabla) {
        while (objTabla.getRowCount()
                > 0) {
            objTabla.removeRow(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnRegistrarRest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddressRest;
    private javax.swing.JLabel lblCityRest;
    private javax.swing.JLabel lblEspacioBoton;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblNameRest;
    private javax.swing.JLabel lblNitRest;
    private javax.swing.JLabel lblPhoneRest;
    private javax.swing.JLabel lblRequeAddress;
    private javax.swing.JLabel lblRequeCity;
    private javax.swing.JLabel lblRequeEmail;
    private javax.swing.JLabel lblRequeName;
    private javax.swing.JLabel lblRequeNit;
    private javax.swing.JLabel lblRequePhone;
    private javax.swing.JPanel pnlCentro;
    private javax.swing.JPanel pnlNorte;
    private javax.swing.JPanel pnlSur;
    private javax.swing.JTable tblListarRestaurant;
    private javax.swing.JTextField txtAddressRest;
    private javax.swing.JTextField txtCityRest;
    private javax.swing.JTextField txtEmailRest;
    private javax.swing.JTextField txtNameRest;
    private javax.swing.JTextField txtNitRest;
    private javax.swing.JTextField txtPhoneRest;
    // End of variables declaration//GEN-END:variables

}
